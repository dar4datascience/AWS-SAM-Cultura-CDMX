renv::status()
renv::restore()
renv::restore()
renv::status()
renv::snapshot()
library(arrow)
library(arrow)
library(dplyr)
library(janitor)
library(R.utils) # for gunzip
library(reactable)
library(R.utils) # for gunzip
library(reactable)
library(htmltools)
library(reactable)
library(htmltools)
library(fontawesome)
# Raw URL of gzip-compressed parquet on GitHub
raw_gz_url <- "https://raw.githubusercontent.com/dar4datascience/AWS-SAM-Cultura-CDMX/main/data/scraped_data_cultura_cartelera_cdmx.parquet"
# Download gzip file
tmp_gz <- tempfile(fileext = ".parquet.gz")
download.file(raw_gz_url, tmp_gz, mode = "wb")
# Download gzip file
tmp_gz <- tempfile(fileext = ".parquet.gz")
download.file(raw_gz_url, tmp_gz, mode = "wb")
# Decompress gzip to Parquet
tmp_parquet <- tempfile(fileext = ".parquet")
R.utils::gunzip(tmp_gz, destname = tmp_parquet, overwrite = TRUE)
# Read Parquet into a tibble
cartelera_cultural_cdmx <- arrow::read_parquet(tmp_parquet) |>
janitor::clean_names()
cartelera_cultural_cdmx |> colna
cartelera_cultural_cdmx |> colnames()
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx |>
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
) |>
distinct(
banner_url,
info_text,
location,
detail_url,
evento,
recinto
)
#| column: page
library(reactable)
library(reactablefmtr)
library(dplyr)
#| column: page
library(reactable)
library(reactablefmtr)
library(dplyr)
library(purrr)
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx |>
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
) |>
distinct(
banner_url,
info_text,
location,
detail_url,
evento,
recinto
)
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "multiple",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
html = TRUE,
cell = function(value, index) {
url <- df_reactable$detail_url[index]
if (!is.na(value) && nzchar(value)) {
sprintf(
'<a href="%s" target="_blank"><img src="%s" height="200" width="235"></a>',
url, value
)
} else {
""
}
}
),
evento = colDef(
name = "Evento",
minWidth = 200
),
recinto = colDef(
name = "Recinto",
minWidth = 200
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
),
detail_url = colDef(
name = "Detail Url",
minWidth = 200,
html = TRUE,
cell = function(value) {
if (!is.na(value) && nzchar(value)) {
sprintf('<a href="%s" target="_blank">Ver Detalles</a>', value)
} else {
""
}
}
)
),
elementId = "tbl-cultura"
)
df_reactable |> colnames()
install.packages("shinylive")
library(arrow)
library(dplyr)
library(janitor)
library(R.utils) # for gunzip
library(reactable)
library(htmltools)
library(fontawesome)
# Raw URL of gzip-compressed parquet on GitHub
raw_gz_url <- "https://raw.githubusercontent.com/dar4datascience/AWS-SAM-Cultura-CDMX/main/data/scraped_data_cultura_cartelera_cdmx.parquet"
# Download gzip file
tmp_gz <- tempfile(fileext = ".parquet.gz")
download.file(raw_gz_url, tmp_gz, mode = "wb")
# Decompress gzip to Parquet
tmp_parquet <- tempfile(fileext = ".parquet")
R.utils::gunzip(tmp_gz, destname = tmp_parquet, overwrite = TRUE)
# Read Parquet into a tibble
cartelera_cultural_cdmx <- arrow::read_parquet(tmp_parquet) |>
janitor::clean_names()
# Now you can use dplyr and reactable
#| column: page
library(reactable)
library(reactablefmtr)
library(dplyr)
library(purrr)
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx |>
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
) |>
distinct(
banner_url,
evento,
recinto,
info_text,
location,
detail_url
)
tagList(
tags$button(
class = "btn btn-primary",
onclick = "Reactable.downloadDataCSV('tbl-cultura')",
tagList(
fontawesome::fa("download"),
"Descargar Todo"
)
)
)
build_cultura_tbl <- function(df) {
reactable(
df,
theme = minty(centered = TRUE),
selection = "multiple",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
html = TRUE,
cell = function(value, index) {
url <- df_reactable$detail_url[index]
if (!is.na(value) && nzchar(value)) {
sprintf(
'<a href="%s" target="_blank"><img src="%s" height="200" width="235"></a>',
url, value
)
} else {
""
}
}
),
evento = colDef(
name = "Evento",
minWidth = 200
),
recinto = colDef(
name = "Recinto",
minWidth = 200
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
),
detail_url = colDef(
name = "Detail Url",
minWidth = 200,
html = TRUE,
cell = function(value) {
if (!is.na(value) && nzchar(value)) {
sprintf('<a href="%s" target="_blank">Ver Detalles</a>', value)
} else {
""
}
}
)
),
elementId = "tbl-cultura"
)
}
# Reactable
df_reactable |>
build_cultura_tbl()
# ojs_define(df_reactable = df_reactable)
renv::snapshot()
saveRDS(cartelera_cultural_cdmx, "cartelera_cultura_cdmx.RData")
shiny::runApp('testo')
shiny::runApp('testo')
runApp('testo')
renv::install('duckdb')
renv::install('dbplyr')
renv::snapshot(bplyr)
renv::snapshot()
