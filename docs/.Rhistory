renv::init()
renv::install(c("yaml", "dplyr", "reactable"))
renv::install('arrow')
renv::install('rmarkdown')
renv::snapshot()
renv::install('janitor')
renv::install("styler")
library(reactable)
library(dplyr)
library(arrow)
cartelera_cultural_cdmx <- read_parquet("http://github.com/dar4datascience/AWS-SAM-Cultura-CDMX/blob/main/data/scraped_data_cultura_cartelera_cdmx.parquet") |>
janitor::clean_names()
arrow::parquet_file_metadata("http://github.com/dar4datascience/AWS-SAM-Cultura-CDMX/blob/main/data/scraped_data_cultura_cartelera_cdmx.parquet")
?arrow::read_parquet
library(reactable)
library(dplyr)
library(arrow)
cartelera_cultural_cdmx <- read_parquet("http://github.com/dar4datascience/AWS-SAM-Cultura-CDMX/blob/main/data/scraped_data_cultura_cartelera_cdmx.parquet") |>
janitor::clean_names()
library(dplyr)
library(arrow)
library(janitor)
library(reactable)
# Correct raw URL
raw_url <- "https://raw.githubusercontent.com/dar4datascience/AWS-SAM-Cultura-CDMX/main/data/scraped_data_cultura_cartelera_cdmx.parquet"
# Download locally first (recommended for Arrow)
tmp_file <- tempfile(fileext = ".parquet")
download.file(raw_url, tmp_file, mode = "wb")
# Read Parquet
cartelera_cultural_cdmx <- arrow::read_parquet(tmp_file) |>
janitor::clean_names()
library(arrow)
library(dplyr)
library(janitor)
library(R.utils)    # for gunzip
library(reactable)
# Raw URL of gzip-compressed parquet on GitHub
raw_gz_url <- "https://raw.githubusercontent.com/dar4datascience/AWS-SAM-Cultura-CDMX/main/data/scraped_data_cultura_cartelera_cdmx.parquet.gz"
# Download gzip file
tmp_gz <- tempfile(fileext = ".parquet.gz")
download.file(raw_gz_url, tmp_gz, mode = "wb")
library(arrow)
library(dplyr)
library(janitor)
library(R.utils) # for gunzip
library(reactable)
# Raw URL of gzip-compressed parquet on GitHub
raw_gz_url <- "https://raw.githubusercontent.com/dar4datascience/AWS-SAM-Cultura-CDMX/main/data/scraped_data_cultura_cartelera_cdmx.parquet"
# Download gzip file
tmp_gz <- tempfile(fileext = ".parquet.gz")
download.file(raw_gz_url, tmp_gz, mode = "wb")
# Decompress gzip to Parquet
tmp_parquet <- tempfile(fileext = ".parquet")
R.utils::gunzip(tmp_gz, destname = tmp_parquet, overwrite = TRUE)
# Read Parquet into a tibble
cartelera_cultural_cdmx <- arrow::read_parquet(tmp_parquet) %>%
janitor::clean_names()
# Now you can use dplyr and reactable
cartelera_cultural_cdmx %>% reactable()
cartelera_cultural_cdmx |> glimpse()
View(cartelera_cultural_cdmx)
cartelera_cultural_cdmx |> colnames()
library(reactable)
library(reactablefmtr)
library(dplyr)
library(purrr)
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx %>%
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
)
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
cell = function(value) {
embed_img(src = value, height = 150, width = 100)
}
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
library(reactable)
library(reactablefmtr)
library(dplyr)
library(purrr)
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx %>%
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
)
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
cell = function(value) {
embed_img(value, height = 150, width = 100)
}
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
renv::snapshot()
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
cell = function(value) {
embed_img(value, height = 150, width = 100)
}
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
reactable(df_reactable)
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
cartelera_cultural_cdmx |> colnames()
df_reactable |> colnames()
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx |>
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
) |>
distinct(
banner_url,
info_text,
location
)
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
cell = function(value) {
embed_img(value, height = 150, width = 100)
}
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
library(reactable)
library(reactablefmtr)
library(dplyr)
library(purrr)
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx |>
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
) |>
distinct(
banner_url,
info_text,
location
)
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
cell = embed_img(df_reactable$banner_url,
height = 200,
width = 235,
horizontal_align = "center"
)
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
)
)
)
library(reactable)
library(reactablefmtr)
library(dplyr)
library(purrr)
# Prepare the dataframe for reactable
df_reactable <- cartelera_cultural_cdmx |>
mutate(
# Collapse list columns into single strings
info_text = map_chr(info, ~ paste(.x, collapse = "<br>"))
) |>
distinct(
banner_url,
info_text,
location,
detail_url
)
# Reactable
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
html = TRUE,
cell = function(value, index) {
url <- df_reactable$detail_url[index]
if (!is.na(value) && nzchar(value)) {
sprintf(
'<a href="%s" target="_blank"><img src="%s" height="200" width="235"></a>',
url, value
)
} else {
""
}
}
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
),
detail_url = colDef(
name = "Detail Url",
minWidth = 200,
html = TRUE,
cell = function(value) {
if (!is.na(value) && nzchar(value)) {
sprintf('<a href="%s" target="_blank">View Details</a>', value)
} else {
""
}
}
)
)
)
reactable(
df_reactable,
theme = fivethirtyeight(centered = TRUE),
selection = "single",
onClick = "select",
striped = TRUE,
pagination = TRUE,
searchable = TRUE,
defaultColDef = colDef(align = "center"),
columns = list(
banner_url = colDef(
name = "Poster",
maxWidth = 200,
html = TRUE,
cell = function(value, index) {
url <- df_reactable$detail_url[index]
if (!is.na(value) && nzchar(value)) {
sprintf(
'<a href="%s" target="_blank"><img src="%s" height="200" width="235"></a>',
url, value
)
} else {
""
}
}
),
info_text = colDef(
name = "Info",
minWidth = 200,
html = TRUE # allow <br> line breaks
),
location = colDef(
name = "Location",
minWidth = 200
),
detail_url = colDef(
name = "Detail Url",
minWidth = 200,
html = TRUE,
cell = function(value) {
if (!is.na(value) && nzchar(value)) {
sprintf('<a href="%s" target="_blank">View Details</a>', value)
} else {
""
}
}
)
)
)
renv::install('usethis')
renv::restore()
renv::install('usethis')
gitcreds::gitcreds_set()
renv::install('styler')
renv::snapshot()
