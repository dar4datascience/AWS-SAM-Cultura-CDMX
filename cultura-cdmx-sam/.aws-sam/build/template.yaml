AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda with Playwright in a Docker container and Step Functions orchestration
Resources:
  CulturaPageCheck:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 15
      MemorySize: 1536
      EphemeralStorage:
        Size: 1024
      Architectures:
      - x86_64
      Role:
        Fn::GetAtt:
        - CulturaPageCheckRole
        - Arn
      ImageUri: culturapagecheck:playwright-pagecheck-v1
    Tags:
      Project: Cultura
      Environment: Dev
      Type: SingleRun
    Metadata:
      DockerContext: /home/chonkydev/Documents/Github Repos/AWS-SAM-Cultura-CDMX/cultura-cdmx-sam/cultura_check_page
      DockerTag: playwright-pagecheck-v1
      Dockerfile: Dockerfile
      SamResourceId: CulturaPageCheck
  CulturaPageCheckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PlaywrightCardScrapper:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 120
      MemorySize: 3008
      EphemeralStorage:
        Size: 1024
      Architectures:
      - x86_64
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: CulturaBucket
      Role:
        Fn::GetAtt:
        - PlaywrightCardScrapperRole
        - Arn
      ImageUri: playwrightcardscrapper:playwright-card-scraper-v1
    Tags:
      Project: Cultura
      Environment: Dev
      Type: MultiRun
    Metadata:
      DockerContext: /home/chonkydev/Documents/Github Repos/AWS-SAM-Cultura-CDMX/cultura-cdmx-sam/playwright_card_scrape
      DockerTag: playwright-card-scraper-v1
      Dockerfile: Dockerfile
      SamResourceId: PlaywrightCardScrapper
  PlaywrightCardScrapperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: S3WriteAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              Fn::Sub: ${CulturaBucket.Arn}/*
  CulturaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
        - Id: ExpireOldObjects
          Status: Enabled
          ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  DuckDBLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: duckdb-layer
      Description: Lambda layer providing duckdb Python library
      ContentUri: ../../layers/duckdb
      CompatibleRuntimes:
      - python3.11
      - python3.12
      RetentionPolicy: Retain
  DuckDBFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: S3ReadWriteAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            Resource:
            - Fn::GetAtt:
              - CulturaBucket
              - Arn
            - Fn::Sub: ${CulturaBucket.Arn}/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              Fn::Sub: ${CulturaBucket.Arn}/*
  DuckDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DuckDBFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - DuckDBFunctionRole
        - Arn
      Layers:
      - Ref: DuckDBLayer
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: CulturaBucket
          GITHUB_OWNER: dar4datascience
          GITHUB_REPO: AWS-SAM-Cultura-CDMX
          GITHUB_SECRET_ARN: arn:aws:secretsmanager:mx-central-1:829489762414:secret:github-scoped-token-zXl6yW
    Metadata:
      SamResourceId: DuckDBFunction
  CulturaScrapeStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
        - CulturaStateMachineRole
        - Arn
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Scrape all pages in parallel using Lambda Map,\
          \ then merge outputs with DuckDB\",\n  \"StartAt\": \"GenerateSnapshotDate\"\
          ,\n  \"States\": {\n    \"GenerateSnapshotDate\": {\n      \"Type\": \"\
          Pass\",\n      \"Comment\": \"Generate a UTC snapshot_date in YYYYMMDD format\"\
          ,\n      \"ResultPath\": \"$.snapshot_date\",\n      \"Parameters\": {\n\
          \        \"snapshot_date.$\": \"States.Format('yyyyMMdd', $$.Execution.StartTime)\"\
          \n      },\n      \"Next\": \"GetPageNumbers\"\n    },\n    \"GetPageNumbers\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${CulturaPageCheck.Arn}\"\
          ,\n      \"ResultPath\": \"$.pages\",\n      \"Next\": \"ScrapePagesMap\"\
          \n    },\n    \"ScrapePagesMap\": {\n      \"Type\": \"Map\",\n      \"\
          ItemsPath\": \"$.pages.body.page_numbers\",\n      \"MaxConcurrency\": 5,\n\
          \      \"Parameters\": {\n        \"page_number.$\": \"$$.Map.Item.Value\"\
          ,\n        \"snapshot_date.$\": \"$.snapshot_date.snapshot_date\"\n    \
          \  },\n      \"Iterator\": {\n        \"StartAt\": \"ScrapeSinglePage\"\
          ,\n        \"States\": {\n          \"ScrapeSinglePage\": {\n          \
          \  \"Type\": \"Task\",\n            \"Resource\": \"${PlaywrightCardScrapper.Arn}\"\
          ,\n            \"End\": true\n          }\n        }\n      },\n      \"\
          Next\": \"DuckDBStep\"\n    },\n    \"DuckDBStep\": {\n      \"Type\": \"\
          Task\",\n      \"Comment\": \"Merge JSONs into Parquet using DuckDB\",\n\
          \      \"Resource\": \"${DuckDBFunction.Arn}\",\n      \"Parameters\": {\n\
          \        \"snapshot_date.$\": \"$.snapshot_date.snapshot_date\"\n      },\n\
          \      \"End\": true\n    }\n  }\n}\n"
  CulturaStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Policies:
      - PolicyName: LambdaInvoke
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - CulturaPageCheck
              - Arn
            - Fn::GetAtt:
              - PlaywrightCardScrapper
              - Arn
  CulturaScrapeScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CulturaScrapeDailyRule
      ScheduleExpression: cron(0 12 * * ? *)
      State: ENABLED
      Targets:
      - Arn:
          Ref: CulturaScrapeStateMachine
        Id: CulturaScrapeStateMachineTarget
        RoleArn:
          Fn::GetAtt:
          - EventBridgeInvokeStepFnRole
          - Arn
  EventBridgeInvokeStepFnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: AllowStartExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              Ref: CulturaScrapeStateMachine
